// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadArm64 returns the embedded CollectionSpec for arm64.
func loadArm64() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Arm64Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load arm64: %w", err)
	}

	return spec, err
}

// loadArm64Objects loads arm64 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *arm64Objects
//     *arm64Programs
//     *arm64Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadArm64Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadArm64()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// arm64Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type arm64Specs struct {
	arm64ProgramSpecs
	arm64MapSpecs
}

// arm64Specs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type arm64ProgramSpecs struct {
	KprobeDoFilpOpen *ebpf.ProgramSpec `ebpf:"kprobe_do_filp_open"`
}

// arm64MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type arm64MapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// arm64Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadArm64Objects or ebpf.CollectionSpec.LoadAndAssign.
type arm64Objects struct {
	arm64Programs
	arm64Maps
}

func (o *arm64Objects) Close() error {
	return _Arm64Close(
		&o.arm64Programs,
		&o.arm64Maps,
	)
}

// arm64Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadArm64Objects or ebpf.CollectionSpec.LoadAndAssign.
type arm64Maps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *arm64Maps) Close() error {
	return _Arm64Close(
		m.Events,
	)
}

// arm64Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadArm64Objects or ebpf.CollectionSpec.LoadAndAssign.
type arm64Programs struct {
	KprobeDoFilpOpen *ebpf.Program `ebpf:"kprobe_do_filp_open"`
}

func (p *arm64Programs) Close() error {
	return _Arm64Close(
		p.KprobeDoFilpOpen,
	)
}

func _Arm64Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed arm64_bpfeb.o
var _Arm64Bytes []byte
