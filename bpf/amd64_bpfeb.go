// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadAmd64 returns the embedded CollectionSpec for amd64.
func loadAmd64() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Amd64Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load amd64: %w", err)
	}

	return spec, err
}

// loadAmd64Objects loads amd64 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *amd64Objects
//     *amd64Programs
//     *amd64Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAmd64Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAmd64()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// amd64Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type amd64Specs struct {
	amd64ProgramSpecs
	amd64MapSpecs
}

// amd64Specs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type amd64ProgramSpecs struct {
	KprobeDoFilpOpen *ebpf.ProgramSpec `ebpf:"kprobe_do_filp_open"`
}

// amd64MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type amd64MapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// amd64Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAmd64Objects or ebpf.CollectionSpec.LoadAndAssign.
type amd64Objects struct {
	amd64Programs
	amd64Maps
}

func (o *amd64Objects) Close() error {
	return _Amd64Close(
		&o.amd64Programs,
		&o.amd64Maps,
	)
}

// amd64Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAmd64Objects or ebpf.CollectionSpec.LoadAndAssign.
type amd64Maps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *amd64Maps) Close() error {
	return _Amd64Close(
		m.Events,
	)
}

// amd64Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAmd64Objects or ebpf.CollectionSpec.LoadAndAssign.
type amd64Programs struct {
	KprobeDoFilpOpen *ebpf.Program `ebpf:"kprobe_do_filp_open"`
}

func (p *amd64Programs) Close() error {
	return _Amd64Close(
		p.KprobeDoFilpOpen,
	)
}

func _Amd64Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed amd64_bpfeb.o
var _Amd64Bytes []byte
